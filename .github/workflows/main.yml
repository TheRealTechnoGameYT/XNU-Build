name: Build latest XNU (x86_64, robust)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-xnu:
    runs-on: macos-latest
    timeout-minutes: 720

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Runner info & environment
        run: |
          set -euo pipefail
          echo "== Runner info =="
          sw_vers
          uname -a
          echo "CPUs: $(sysctl -n hw.ncpu || echo unknown)"
          echo "Path: $PATH"
          xcodebuild -version || true

      - name: Ensure Homebrew & base packages
        run: |
          set -euo pipefail
          echo "== Installing Homebrew packages if missing =="
          if ! command -v brew >/dev/null 2>&1; then
            echo "Homebrew not found. Installing Homebrew (non-interactive)..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || true
            if [ -f /opt/homebrew/bin/brew ]; then
              eval "$(/opt/homebrew/bin/brew shellenv)"
            elif [ -f /usr/local/bin/brew ]; then
              eval "$(/usr/local/bin/brew shellenv)"
            fi
          fi
          brew update || true
          brew install autoconf automake libtool gnu-tar bison flex gnu-sed jq coreutils || true
          echo "Installed/checked packages:"
          autoconf --version || true
          jq --version || true

      - name: Choose / check Xcode
        run: |
          set -euo pipefail
          echo "== Choosing Xcode if available =="
          if [ -d /Applications/Xcode_13.2.1.app ]; then
            echo "Selecting /Applications/Xcode_13.2.1.app"
            sudo xcode-select -s /Applications/Xcode_13.2.1.app/Contents/Developer
          elif [ -d /Applications/Xcode.app ]; then
            echo "Using /Applications/Xcode.app"
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          else
            echo "No Xcode app found in /Applications; build may fail."
          fi
          xcodebuild -version || true
          sudo xcodebuild -license accept || true

      - name: Download KDK archive from Release (zip/tgz/dmg/pkg) and extract .kdk
        id: get_kdk
        run: |
          set -euo pipefail
          echo "== Download KDK from release assets =="
          mkdir -p /tmp/kdk
          cd /tmp/kdk

          BASE="https://github.com/TheRealTechnoGameYT/XNU-Build/releases/download/Rien"

          # list of likely asset names (adjust if your release uses different names)
          candidates=(
            "KDK_26.1_25B5042k.kdk.zip"
            "KDK_26.1_25B5042k.kdk.tar.gz"
            "KDK_26.1_25B5042k.kdk.zip"
            "KDK_26.1_25B5042k.kdk.tar.gz"
            "KDK_26.0_25B5042k.kdk.zip"
            "KDK_26.0_25B5042k.kdk.tar.gz"
            "Kernel_Debug_Kit_26_build_25B5042k.dmg"
            "Kernel_Debug_Kit_26_build_25B5042k.pkg"
            "kdk.dmg"
            "kdk.pkg"
          )

          FOUND_ASSET=""
          for name in "${candidates[@]}"; do
            url="${BASE}/${name}"
            echo "Trying $url"
            if curl -sfL -o "./asset.tmp" "$url"; then
              file -b --mime-type asset.tmp || true
              mv asset.tmp "$name"
              FOUND_ASSET="$name"
              echo "Downloaded asset as $name"
              break
            fi
          done

          if [ -z "$FOUND_ASSET" ]; then
            echo "❌ No KDK asset found at the release URL. Please upload a zipped .kdk (zip/tar.gz) to the release."
            exit 1
          fi

          ASSET="$FOUND_ASSET"
          mkdir -p /tmp/kdk/extract

          if echo "$ASSET" | grep -E '\.zip$' >/dev/null; then
            echo "Unzipping $ASSET"
            unzip -q "$ASSET" -d /tmp/kdk/extract || ( echo "unzip failed"; exit 1 )
          elif echo "$ASSET" | grep -E '\.tar\.gz$|\.tgz$' >/dev/null; then
            echo "Untarring $ASSET"
            tar -xzf "$ASSET" -C /tmp/kdk/extract || ( echo "tar failed"; exit 1 )
          elif echo "$ASSET" | grep -E '\.dmg$' >/dev/null; then
            echo "Mounting DMG $ASSET"
            hdiutil attach "$ASSET" -nobrowse -mountpoint /Volumes/_kdk_temp || true
            mkdir -p /tmp/kdk/extract
            cp -R /Volumes/_kdk_temp/* /tmp/kdk/extract/ || true
            hdiutil detach /Volumes/_kdk_temp || true
          elif echo "$ASSET" | grep -E '\.pkg$' >/dev/null; then
            echo "PKG downloaded: $ASSET - will attempt silent install"
            sudo installer -pkg "$ASSET" -target / || true
          else
            echo "Unknown asset type: $ASSET"
            exit 1
          fi

          echo "Listing extracted files:"
          find /tmp/kdk/extract -maxdepth 4 -type f -printf '%p\n' || true

          # Find .kdk dir
          KDK_DIR=$(find /tmp/kdk/extract -type d -name "*.kdk" -maxdepth 4 | head -n1 || true)
          if [ -n "$KDK_DIR" ]; then
            echo "Found .kdk at $KDK_DIR - copying to /Library/Developer/KDKs"
            sudo mkdir -p /Library/Developer/KDKs
            sudo cp -R "$KDK_DIR" /Library/Developer/KDKs/
            KDK_INSTALLED="/Library/Developer/KDKs/$(basename "$KDK_DIR")"
            echo "kdk_path=$KDK_INSTALLED" >> "$GITHUB_OUTPUT"
            echo "Copied .kdk to $KDK_INSTALLED"
            exit 0
          fi

          # If no .kdk found, look for inner PKG and attempt installation
          PKG_INSIDE=$(find /tmp/kdk/extract -type f -name "*.pkg" -maxdepth 4 | head -n1 || true)
          if [ -n "$PKG_INSIDE" ]; then
            echo "Found inner pkg: $PKG_INSIDE - attempting install"
            sudo installer -pkg "$PKG_INSIDE" -target / || true
          fi

          # Final check: maybe installer created the .kdk
          if ls /Library/Developer/KDKs/*.kdk >/dev/null 2>&1; then
            KDK_INSTALLED=$(ls -d /Library/Developer/KDKs/*.kdk | head -n1)
            echo "kdk_path=$KDK_INSTALLED" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "❌ No .kdk detected after extraction/install. For reliable CI, upload a zipped .kdk (zip/tar.gz) in the release."
          exit 1

      - name: Verify KDK & set vars
        id: detect_kdk
        run: |
          set -euo pipefail
          echo "== Detect installed KDKs =="
          ls -la /Library/Developer/KDKs || true
          KDK_DIR=$(ls -d /Library/Developer/KDKs/*.kdk 2>/dev/null | head -n1 || true)
          if [ -z "$KDK_DIR" ]; then
            echo "::error::No KDK found in /Library/Developer/KDKs"
            echo "no_kdk=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Found KDK: $KDK_DIR"
          echo "found_kdk=$KDK_DIR" >> $GITHUB_OUTPUT
          base=$(basename "$KDK_DIR")
          darwin_major=$(echo "$base" | grep -oE '[0-9]+' | head -n1 || true)
          if [ -z "$darwin_major" ]; then darwin_major="0"; fi
          echo "darwin_major=$darwin_major" >> $GITHUB_OUTPUT
          if [ -d "$KDK_DIR/System/Library/Developer/SDKs/MacOSX.sdk" ]; then
            echo "sdkroot=$KDK_DIR/System/Library/Developer/SDKs/MacOSX.sdk" >> $GITHUB_OUTPUT
          else
            sdkpath=$(xcrun -sdk macosx -show-sdk-path || true)
            echo "sdkroot=$sdkpath" >> $GITHUB_OUTPUT
          fi

      - name: Download latest XNU tag (robust) and clone
        run: |
          set -euo pipefail
          echo "== Fetch latest XNU tag via GitHub API (robust) =="
          API_URL="https://api.github.com/repos/apple-oss-distributions/xnu/tags"
          raw=$(curl -sS "$API_URL" || true)
          # If API returned an array -> handle it, else fallback
          if echo "$raw" | grep -q '^\s*\['; then
            latest_tag=$(echo "$raw" | jq -r '.[].name' 2>/dev/null | sort -V | tail -n1 || true)
          else
            # maybe API returned object (rate limit / error). Try fallback: fetch tags via git
            echo "API did not return array (maybe rate limit). Falling back to git ls-remote tags."
            latest_tag=$(git ls-remote --tags --refs https://github.com/apple-oss-distributions/xnu.git | awk -F/ '{print $NF}' | sort -V | tail -n1 || true)
          fi

          if [ -z "$latest_tag" ] || [ "$latest_tag" = "null" ]; then
            echo "⚠️ Could not determine latest tag; cloning default branch"
            git clone --depth 1 https://github.com/apple-oss-distributions/xnu.git xnu
          else
            echo "✅ Latest XNU tag: $latest_tag"
            git clone --depth 1 --branch "$latest_tag" https://github.com/apple-oss-distributions/xnu.git xnu
          fi
          ls -la xnu

      - name: Prepare environment & prebuild checks
        run: |
          set -euo pipefail
          echo "== Pre-build checks =="
          echo "Detected KDK: ${{ steps.detect_kdk.outputs.found_kdk || '' }}"
          echo "Detected Darwin major: ${{ steps.detect_kdk.outputs.darwin_major || '' }}"
          echo "Detected SDKROOT: ${{ steps.detect_kdk.outputs.sdkroot || '' }}"
          if [ -n "${{ steps.detect_kdk.outputs.sdkroot }}" ]; then
            ls -la "${{ steps.detect_kdk.outputs.sdkroot }}" || true
          fi
          ls -la /Library/Developer/KDKs || true

      - name: Ensure availability.pl (copy from KDK or create shim)
        run: |
          set -euo pipefail
          echo "== Ensure availability.pl exists =="
          SDKROOT="${{ steps.detect_kdk.outputs.sdkroot }}"
          KDKDIR="${{ steps.detect_kdk.outputs.found_kdk }}"
          if [ -n "$SDKROOT" ] && [ -d "$SDKROOT" ]; then
            TARGET_DIR="$SDKROOT/usr/local/libexec"
          else
            TARGET_DIR="/usr/local/libexec"
          fi
          sudo mkdir -p "$TARGET_DIR"
          # Try to copy from KDK
          if [ -n "$KDKDIR" ] && [ -d "$KDKDIR" ]; then
            CANDIDATE=$(find "$KDKDIR" -type f -name "availability.pl" | head -n1 || true)
            if [ -n "$CANDIDATE" ]; then
              echo "Copying availability.pl from $CANDIDATE to $TARGET_DIR"
              sudo cp "$CANDIDATE" "$TARGET_DIR/"
              sudo chmod +x "$TARGET_DIR/availability.pl"
              exit 0
            fi
          fi
          # Try to find in /tmp/kdk/extract
          if [ -d "/tmp/kdk/extract" ]; then
            C2=$(find /tmp/kdk/extract -type f -name "availability.pl" | head -n1 || true)
            if [ -n "$C2" ]; then
              sudo cp "$C2" "$TARGET_DIR/"
              sudo chmod +x "$TARGET_DIR/availability.pl"
              exit 0
            fi
          fi
          # Last resort: create shim
          echo "Creating availability.pl shim at $TARGET_DIR/availability.pl (fallback)"
          sudo tee "$TARGET_DIR/availability.pl" > /dev/null <<'EOF'
#!/usr/bin/env perl
warn "availability.pl shim: limited functionality - prefer real availability.pl from KDK\n";
exit 0;
EOF
          sudo chmod +x "$TARGET_DIR/availability.pl"
          echo "Shim created."

      - name: Build XNU (main step) - verbose + logging
        id: build_step
        run: |
          set -euxo pipefail
          cd xnu
          # set RC_DARWIN_KERNEL_VERSION if detected
          if [ -n "${{ steps.detect_kdk.outputs.darwin_major }}" ] && [ "${{ steps.detect_kdk.outputs.darwin_major }}" != "0" ]; then
            export RC_DARWIN_KERNEL_VERSION=${{ steps.detect_kdk.outputs.darwin_major }}
          fi
          if [ -n "${{ steps.detect_kdk.outputs.sdkroot }}" ]; then
            export SDKROOT="${{ steps.detect_kdk.outputs.sdkroot }}"
          fi
          echo "RC_DARWIN_KERNEL_VERSION=$RC_DARWIN_KERNEL_VERSION"
          echo "SDKROOT=$SDKROOT"
          BUILD_LOG="$GITHUB_WORKSPACE/xnu-build.log"
          echo "Build started at $(date)" > "$BUILD_LOG"
          echo "RUN: make SDKROOT='$SDKROOT' ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=RELEASE -j$(sysctl -n hw.ncpu)" >> "$BUILD_LOG"
          if [ -n "$SDKROOT" ]; then
            make SDKROOT="$SDKROOT" ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=RELEASE -j$(sysctl -n hw.ncpu) 2>&1 | tee -a "$BUILD_LOG"
            EXIT_CODE=${PIPESTATUS[0]}
          else
            make ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=RELEASE -j$(sysctl -n hw.ncpu) 2>&1 | tee -a "$BUILD_LOG"
            EXIT_CODE=${PIPESTATUS[0]}
          fi
          echo "make exit: $EXIT_CODE" >> "$BUILD_LOG"
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "::error::make failed (exit $EXIT_CODE); saving log and failing"
            cp "$BUILD_LOG" "$GITHUB_WORKSPACE/" || true
            exit "$EXIT_CODE"
          fi
          echo "Build succeeded" >> "$BUILD_LOG"
          cp "$BUILD_LOG" "$GITHUB_WORKSPACE/"

      - name: Package artifacts (kernel + dSYM + logs + summary)
        if: success()
        run: |
          set -euo pipefail
          echo "== Packaging artifacts =="
          mkdir -p "$GITHUB_WORKSPACE/artifacts"
          # Copy kernel binaries (search common locations)
          find xnu/BUILD -type f -name 'kernel' -print -exec cp {} "$GITHUB_WORKSPACE/artifacts/" \; || true
          # Copy .dSYM directories
          find xnu/BUILD -type d -name '*.dSYM' -print -exec cp -R {} "$GITHUB_WORKSPACE/artifacts/" \; || true
          # Copy build log
          if [ -f "$GITHUB_WORKSPACE/xnu-build.log" ]; then
            cp "$GITHUB_WORKSPACE/xnu-build.log" "$GITHUB_WORKSPACE/artifacts/"
          fi
          echo "XNU build summary" > "$GITHUB_WORKSPACE/artifacts/build-summary.txt"
          echo "Date: $(date)" >> "$GITHUB_WORKSPACE/artifacts/build-summary.txt"
          cd "$GITHUB_WORKSPACE"
          tar -czf xnu-artifacts-$(date +%Y%m%d-%H%M%S).tar.gz artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xnu-artifacts
          path: |
            xnu-artifacts-*.tar.gz
            artifacts/**

      - name: Final status
        if: success()
        run: |
          echo "✅ Build job finished successfully"
          ls -lh *.tar.gz || true

      - name: On failure - collect logs and hints
        if: failure()
        run: |
          set -euo pipefail
          echo "❌ Build failed – collecting logs"
          mkdir -p "$GITHUB_WORKSPACE/artifacts_on_failure"
          cp -R xnu/BUILD "$GITHUB_WORKSPACE/artifacts_on_failure/" || true
          cp -R /tmp/kdk "$GITHUB_WORKSPACE/artifacts_on_failure/" || true
          cp -R /Library/Developer/KDKs "$GITHUB_WORKSPACE/artifacts_on_failure/" || true
          if [ -f "$GITHUB_WORKSPACE/xnu-build.log" ]; then
            cp "$GITHUB_WORKSPACE/xnu-build.log" "$GITHUB_WORKSPACE/artifacts_on_failure/"
          fi
          tar -czf xnu-failure-artifacts-$(date +%Y%m%d-%H%M%S).tar.gz artifacts_on_failure || true
          ls -la artifacts_on_failure || true
          echo "::warning::Attach the generated failure artifact from the workflow 'Artifacts' tab for debugging."

